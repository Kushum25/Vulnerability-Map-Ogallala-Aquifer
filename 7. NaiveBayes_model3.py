# -*- coding: utf-8 -*-
"""
Created on Wed march 05 00:02:07 2023

@author: Rakshya
"""
# Import libraries
import os
import numpy as np
import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns
from matplotlib import pyplot as plt

#Setting working directory
path ='C:/Users/14098/OneDrive - Lamar University/Desktop/Machine Learning/Project 2'
os.chdir(path)

#Step 1: Read the filtered data File 
a = pd.read_csv('Data1.csv')
a.head()

# Step 3: Define the variables, Dataframe X and Y
X = a.iloc[:,[4,5,6,9,10,11]] 
Y = a.iloc[:,3] 

#Step 4: Reclassifying the X and Y variables
#Step 4.1:Normalize all X variables (dataset values between 0 and 1)
X_norm=(X-X.min())/(X.max()-X.min())
X = X_norm                               
X

#Step 4.2: Reclassify Y variable using the cutoff value
threshold = 1.5                        # permissible fluoride for drinking water standard
Y = Y.apply(lambda Y: Y >= threshold).astype(int)
Y

#Step 5: Slipt the data into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.30,random_state=9241)


#Step 6: For TRAINING DATASET, Perform Naive Bayes Classifier (NBC) using same variables as for Logistic Regression Model1
#Step 6.1: Fit Gaussian Naive Bayes Model
gaussNB = GaussianNB()
gaussNB.fit(X_train,Y_train)

#Step 6.2: Predict Y using the model
y_pred = gaussNB.predict(X_train)    # Predict training data

#Step 6.3: Performance evaluation using contingency table
#Step 6.3.1: Create a confusion Matrix
cnf_matrix = metrics.confusion_matrix(Y_train, y_pred)
cnf_matrix # y_test is going be rows (obs), y_pred (predicted) are cols

#Step 6.4: Evaluating the model using accuracy, precision, recall
print("Accuracy:",metrics.accuracy_score(Y_train, y_pred))     # overall accuracy (predicting 0 and 1)
print("Precision:",metrics.precision_score(Y_train, y_pred))   # predicting 0 (less concentration-> acceptable state)
print("Recall:",metrics.recall_score(Y_train, y_pred))         # predicting 1 (higher concentration -> vulnerabile state)

#Step 6.5: ROC Curve
y_pred_proba = gaussNB.predict_proba(X_train)[::,1]
fpr, tpr, _ = metrics.roc_curve(Y_train,  y_pred_proba)
auc = metrics.roc_auc_score(Y_train, y_pred_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(round(auc,4)))
plt.legend(loc=4)
plt.title('Receiver Operating Characteristics Curve')
plt.xlabel('1-Specificity')
plt.ylabel('Sensitivity') 
plt.grid()   # Plot the grid
plt.show()   # show the curve

# Step 6.3.2: Plot confusion Matrix
class_names=[0,1]
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
#Step 6.3.3: Create heatmap
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
ax.yaxis.set_label_position('left')
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')


# Step 7: For TESTING DATASET, the model obtained using the training dataset is used to fit the regression model
#Step 7.1: Fit the model to the TESTING data
y_pred= gaussNB.predict(X_test) # predict testing data

#Step 7.2: Perform evaluation using contingency table
#Step 7.2.1: Create a confusion Matrix
cnf_matrix = metrics.confusion_matrix(Y_test, y_pred)
cnf_matrix # y_test is going be rows (obs), y_pred (predicted) are cols

#Step 7.3: Evaluating model usnig accuracy, precision, recall
print("Accuracy:",metrics.accuracy_score(Y_test, y_pred))      # overall accuracy (predicting 0 and 1)
print("Precision:",metrics.precision_score(Y_test, y_pred))    # predicting 0 (less concentration-> acceptable state)
print("Recall:",metrics.recall_score(Y_test, y_pred))          # predicting 1 (higher concentration -> vulnerabile state)

#Step 7.4: ROC Curve
y_pred_proba = gaussNB.predict_proba(X_test)[::,1]
fpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)
auc = metrics.roc_auc_score(Y_test, y_pred_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(round(auc,4)))
plt.legend(loc=4)
plt.title('Receiver Operating Characteristics Curve')
plt.xlabel('1-Specificity')
plt.ylabel('Sensitivity') 
plt.grid()      # Plot the grid
plt.show()      #show the curve

# Step 7.2.2: Plot confusion Matrix
class_names=[0,1] 
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
#Step 7.2.3: Create heatmap
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
ax.yaxis.set_label_position('left')
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')


#Step 8: (for the best model among two) Predicting the y parameter for all x variables (to be used in KNN)
Fl_predict_NBC = gaussNB.predict(X)                                           # predict whole dataset
Fl_pred_probab = gaussNB.predict_proba(X)[::,1]
Fl_predict_NBC1 = pd.DataFrame(Fl_pred_probab, columns = ['Fl_predict_NBC'])   # convert array to pandas dataframe
SWID_Fl_pred_NBC = pd.concat([a['StateWellID'], a['Latitude'], a['Longitude'], Fl_predict_NBC1], axis=1) # concat to dataset
SWID_Fl_pred_NBC.to_csv('SWID_Fl_pred_NBC.csv', index=False)



