# -*- coding: utf-8 -*-
"""
Created on Feb 23 16:26:12 2023

@author: Rakshya
"""

import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import seaborn as sns


#Setting working directory
path ='C:/Users/14098/OneDrive - Lamar University/Desktop/Machine Learning/Project 2'
os.chdir(path)

#Step 1: Read the filtered data File 
a = pd.read_csv('Data1.csv')
a.head()

# Step 3: Define the variables, Dataframe X and Y
X = a.iloc[:,[4,5,6,9,10,11]] 
Y = a.iloc[:,3] 

#Check for collinearity: Compute correlations matrix (of the X variable of dataframe)
corr = X.corr(method='kendall')


#Step 4: Reclassifying the X and Y variables
#Step 4.1:Normalize all X variables (dataset values between 0 and 1)
X_norm=(X-X.min())/(X.max()-X.min())
X = X_norm                              
X

#Step 4.2: Reclassify Y variable using the cutoff value for fluoride 
threshold = 1.5  # permissible Fluoride content in water as per WHO = 1.5 mg/L
Y = Y.apply(lambda Y: Y >= threshold).astype(int)
Y

#Step 5: Splitting the data into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.30,random_state=9241)

#step 6:Perform NBC using same variables as used in LR
#Step 6.1: Define the model and Fitting the model
logreg = LogisticRegression(C=10**9)
logreg.fit(X_train, Y_train)

#Step 6.2:Predicting the contaminant for training data
y_pred = logreg.predict(X_train)

#Step 6.3: Get the parameters (summary)
logreg.get_params()
logreg.coef_
logreg.intercept_

#Step 6.4: Create a confusion Matrix
cnf_matrix = metrics.confusion_matrix(Y_train, y_pred)
cnf_matrix # y_test is going be rows (obs), y_pred (predicted) are cols

# Step 6.5: Evaluating the model using accuracy, precision, recall
print("Accuracy:",metrics.accuracy_score(Y_train, y_pred))    # overall accuracy (predicting 0 and 1)
print("Precision:",metrics.precision_score(Y_train, y_pred))  # predicting 0 (less concentration-> acceptable state)
print("Recall:",metrics.recall_score(Y_train, y_pred))        # predicting 1 (higher concentration -> vulnerabile state)

#Step 6.7: ROC Curve
y_pred_proba = logreg.predict_proba(X_train)[::,1]
fpr, tpr, _ = metrics.roc_curve(Y_train,  y_pred_proba)
auc = metrics.roc_auc_score(Y_train, y_pred_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(round(auc,4)))
plt.legend(loc=4)
plt.xlabel('1-Specificity')
plt.ylabel('Sensitivity')
plt.grid()
plt.show()

# Step 6.5.1: Plot confusion Matrix
class_names=[0,1]                         
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
# Step 6.5.2: Create heatmap
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
ax.yaxis.set_label_position('left')
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')


# Step 7: Testing dataset
#Step 7.1: Fit the model to the Testing data
y_pred=logreg.predict(X_test) # fit testing data

#Step 7.2: Get the parameters
logreg.get_params()
logreg.coef_
logreg.intercept_

#Step 7.3: Create a confusion Matrix
cnf_matrix = metrics.confusion_matrix(Y_test, y_pred)
cnf_matrix # y_test is going be rows (obs), y_pred (predicted) are cols

#Step 7.4: Evaluate usng accuracy, precision, recall
print("Accuracy:",metrics.accuracy_score(Y_test, y_pred))         # overall accuracy (predicting 0 and 1)
print("Precision:",metrics.precision_score(Y_test, y_pred))       # predicting 0 (less concentration-> acceptable state)
print("Recall:",metrics.recall_score(Y_test, y_pred))             # predicting 1 (higher concentration -> vulnerabile state)

#Step 7.5: ROC Curve
y_pred_proba = logreg.predict_proba(X_test)[::,1]
fpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)
auc = metrics.roc_auc_score(Y_test, y_pred_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(round(auc,4)))
plt.legend(loc=4)
plt.xlabel('1-Specificity')
plt.ylabel('Sensitivity')
plt.grid()
plt.show()

#Step 7.3.1: Plot confusion Matrix
class_names=[0,1] 
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
#Step 7.3.2: Create heatmap
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
ax.yaxis.set_label_position('left')
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('PredictedÂ label')


#Step 8: Predicting the y parameter for all x variables 
Fl_predict_LR = logreg.predict(X) 
Fl_pred_LR_probab = logreg.predict_proba(X)[::,1]                                        # predict whole dataset
Fl_pred_LR = pd.DataFrame(Fl_pred_LR_probab, columns = ['Fl_pred_LR_probab'])   # convert array to pandas dataframe
SWID_Fl_pred_LR = pd.concat([a['StateWellID'], a['Latitude'], a['Longitude'], Fl_pred_LR], axis=1) # concat to dataset
SWID_Fl_pred_LR.to_csv('SWID_Fl_pred_LR.csv', index=False)
